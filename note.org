* Rings
** Switching rings
* System architecture
- All circuits are made either combination or sequential.
- Programmers communicate with hardware through writing to ports (physical pins)
  or writing to registers.
- Controllers are just programmable hardware. CPU is just another form of controller.
** The 80x86 Registers
*** Segment registers
*** Index registers
*** PC register
*** Special purpose registers
** System Orginazation
- Von Neumann: data and instructions share memory. Instructions are a form of data.
- The CPU communicates with the Memory Controller to retrieve data and instructions.
** The System Bus
*** Data bus
*** Address bus
*** Control bus
** Real Mode Memory Map
** How an instruction executes
- Using the instruction register (also call Program Counter) to point to the
  address of the next instruction.
** Software Ports
All I/O Ports are mapped to a given memory location. This allows us to use the
*IN* and *OUT* instructions. I/O ports are just physical pins anyway.
* Protected mode
- Designed to increase the stability of the systems.
- Has hardware support for Virtual Memory and Task State Switching (TSS)
- Hardware support for interrupting programs and executing another
- 4 Operating Modes: Ring 0, Ring 1, Ring 2, Ring 3
- Access to 32 bit registers
- Access to up to 4 GB of memory
* A20 line
- To maintain backward compatible with older x86 processor, A20 is disabled to
  prevent accessing memory beyond 1MB, so the memory address can wrap around.
  
- For example, if we try to access address beyond 0x10000 in real mode, like
  0x10047, the address becomes 0x00047 after we load it into a register.
* Global Descriptor Table
- Provide parameters for code/data segments i.e. where each segment starts.
- Once getting into Protected Mode, jump must use the selectors defined by the
  table. Absolute address has no effect.
- Direction Bit/Conforming Bit is very important for defining a call gate.
http://wiki.osdev.org/GDT
** Exercises
- Load and execute the kernel at 0x1000 in protected mode.
- Load and execute the kernel at 0x10000 in protected mode.
- Load and execute the kernel at 0x20000 in protected mode.
- Load and execute the kernel at 0x100F0 in protected mode.
- Load and execute the kernel at 0x10FF0 in protected mode.
- Load and execute the kernel at 0x10FFF in protected mode.
* Basic VGA programming
- Write a character at position (5,5).
- Write a character at position (10,10).
- Write a string at position (5,5).
- Write two string at position (5,5) and (5,6) by moving the cursor.
* Getting into User Space
- Kernel cannot jump/call into code in userspace directly. Fault occurs when
  trying ot do so. We can only jump from lower privilege code to higher (i.e.
  from ring 3 to ring 0).
- Must execute IRET instruction. We must push appropriate data on the stack for
  the instruction to use. This is important.
- Must Define userspace segments (code and data) in GDT, so IRET can jump properly

n
