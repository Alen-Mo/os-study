* DONE Add kernel code/data segment 
CLOSED: [2015-09-29 Tue 16:05]
* DONE Add userspace code/data segment
CLOSED: [2015-09-29 Tue 16:05]
* DONE Add custom code/data segments (i.e. overlapping segments)
CLOSED: [2015-09-29 Tue 16:05]
* DONE Implement User Space (from ring 0 to ring 3)
CLOSED: [2015-09-29 Tue 16:04]
* DONE Implmenet system call (from ring 3 to ring 0)
CLOSED: [2015-10-01 Thu 16:23]
** DONE Use *sysenter* instruction properly
CLOSED: [2015-09-29 Tue 18:22]
Must setup in ring 0 the system call entry before getting into ring 3.
Otherwise, *wrmsr* and *rdmsr* don't work.
** DONE Use *sysexit* instruction properly
CLOSED: [2015-09-29 Tue 18:22]
We must push stack pointer to ecx, return address to edx for it to work properly
before calling *sysenter*
** DONE Make writing on scree properly after entering userspace
CLOSED: [2015-09-30 Wed 13:47]
Things to remember:
- After protected mode is entered, everything is accessed via segments.
- As a result, when switching between userspace and kernel space, we must use
  appropriate segments, otherwise even registers may hold correct address, wrong
  address is still accessed.
- Better define segment descriptor for specific memory mapping, i.e. video memory.
- EIP is relative to segment.

ClrScr32 works properly by using segment. Putch32 works properly by using
segment.

Learning how to create and manipulate properly is important.
* DONE Reorganize source code
CLOSED: [2015-10-01 Thu 16:24]
* DONE Create C/C++ Runtime Library (CRT) and Hardware Abstraction Layer (HAL)
CLOSED: [2015-10-05 Mon 18:28]
** DONE Construct a ctype.h
CLOSED: [2015-10-05 Mon 18:28]
- Need to understand the array ctype[] is holding type of character in ASCII,
  not the characters itself. We check the character types by indexed into the
  array.

- Construct convenient routines for character/string manipulation.
** DONE Construct macro to process variable number of arguments
CLOSED: [2015-10-05 Mon 18:28]
- Create va_list.h that creates a aliased type for char pointer to access
  memory locations of arguments of a function.
- Create VA_SIZE that calculates the size of an argument.
- Create VA_START that jump to the beginning of variable arguments based on the
  last concrete  argument in the function argument list and start the
  loop to process argument by argument.
- Create VA_END that terminate the loop.
- Create a va_arg to access current argument in argument list. We must supply a
  type for correct return the argument with appropriate type as well as
  advancing AP pointer to the correct position of the next argument.
* DONE Interrupt
CLOSED: [2015-10-06 Tue 16:01]
** DONE Build an IDT for one interrupt and able to jump to it
CLOSED: [2015-10-05 Mon 18:29]
** DONE After entering interupt routine, we should be able to return properly
CLOSED: [2015-10-06 Tue 16:01]
** DONE We should be able to define and use variables in the same file
CLOSED: [2015-10-06 Tue 18:11]
To do this, we must use *org* directive to tell the assembler where this file
starts from in memory, so it can generate precise memory location. Without *org*
directive, all we get is just an offset of a variable, from where it is to the start
of the file.
