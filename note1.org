* Learning objectives
At the end of the course, we should be able to write an OS with:

*Bootloader*:
- Stage 1: rudimentary setup for next stage
- Stage 2: setup to prepare for procted mode environment.

*Kernel*:
- Kernel space
- User space
- Interrupt handler
- Basic graphic management.
- PIC Programming.
- Keyboard programming.
- DMA programming.

We will learn a great deal about x86 architecture through writing this OS. Once
you master the concepts, learning mainstream OS development like Linux will be
much easier.

* What is a computer?
- A *computer* combines a processor, random access memory (RAM), read only memory
(ROM), and input/output (I/O) ports. 

- A *microprocessor* is a small processor. A microcomputer is a small computer that
includes a processor, memory and I/O devices. A microcontroller is a single chip
computer.

- Current implementation: an electrical circuit that implements computation.

- Future implementation: Biological computer, quantum computer.

* Types of Computer implementation
- Computer can be divided into two types: single-purpose and general-purpose.

- _Single-purpose computer_ is built at *hardware level* for specific tasks. For
  example, dedicated encoders/decoders , timer, image/video/sound processors...
  These computers are created through direct circuit designed called
  *Application-Specific Integrated Circuit* (=ASIC=) or *FPGA*, a programmable
  hardrware to emulate other hardware.

- _General-purpose computer_: can be programmed (without modifying the hardware
  like ASIC or FPGA) to emulate various features of single-purpose computers.

- Current general-purpose computer is implemented based on Von Neuman architecture

* Computer implementation: Von Neumman architecture
Named after John Von Neumman.

[[./von_neuman_computer.gif][von_neumman]]

- *Central processing unit*: Performs operations on values in registers & memory.
- *Main memory*: Array of W words of N bits each.
- *Input/output devices* to communicate with the outside world.

* How a Von Neumman computer works
- Fetch: Instruction is retrieved from working memory (RAM).
- Decode: CPU identifies which instruction has been fetched.
- Execute: Run the instruction as implemented in processor hardware.
* Note about single-purpose computer
- It can be confused between embedded system and single-purpose computer.

- Embedded system is a general-purpose computer with very limited resource,
  designed to perform a single task at a time.

- Even though embedded system is used for a single purpose, it can be programmed
  to perform different tasks, depends on its programmers. Single-purpose
  computer is built at hardware level to perform a task, thus not programmable.

- General-purpose computer, Whether is a super computer, or it is a tiny
  embedded computer, the model remains the same.
* Examples of a computer
[[./macbook.jpeg][macbook]]

[[./stm-microcontroller.jpeg][stm-microcontroller]]

[[./pic.jpeg][pic]]
* How can software controls hardware?
- Through ardware-software interface: Assembly language.

- Each ASM instruction is implemented in hardware as a series of bits. Each ASM
  instruction has a different bit pattern. 

- A collection of ASM instructions is called ISA - Instruction Set Architecture.
  ISA is a contract between software and hardware.

- ISA allows programmers to control the CPU and other devices in a computer to
  create computer programs.

- Program is loaded on memory, CPU fetches and execute instruction by
  instruction until the end. It works for small computer i.e. microcontroller.

* The need for an operating system
- When resources in a computer system (CPU, memory, hard drive...) became big
  and more complicated, it's tedious to manually manage all the resources.

- For example: Imagine we have to manually load programs on a computer with 3GB
  RAM. We would have to load programs at various fix addresses, and for each
  program a size must be manually calculated to avoid wasting memory resource,
  and enough for programs to not overriding each other.

- A software is needed to automatically manage all these tasks. This software is
  called *Operating System*.

* Jobs of an operating system
Manage hardware resources automatically and efficiently. The two most basic
tasks that an OS need to perform

- Manage CPU: allows programs to share hardware resources for multitasking.
- Manage memory: allocates enough storage for a program to function.

The above two resources are essential in a Von Neumman archtecture, and any OS
should be good at the above tasks. Other responsibilities include:

- Filesystem for managing various types of data.
- Manage other hardware devices i.e. hard drive, printer, graphic devices...
- Security: OS rings, kernel/user space, different address spaces for different processes.
- A framework for managing hardware resources i.e. it should be easy to extend
  OS code to talk to new hardware.

Our OS will be a simple OS that implements two most basic tasks: manage CPU and memory.

* Tools
** A working Linux environment
- Linux has many utilities that make development easier i.e. =make=, =dd=...
** nasm
- Homepage: http://www.nasm.us/
- Install with a package manager or compile from source.
** bochs
- Homepage: http://bochs.sourceforge.net/
- Download: http://sourceforge.net/projects/bochs/
- Compile from source to get both =bochs= and =bochsdbg=.
- To build:

#+BEGIN_SRC sh
  ./configure --enable-all-optimizations --enable-disasm --enable-logging
    --with-sdl --with-x --with-x11
  make
  sudo make install
#+END_SRC

- Rebuilt again, this time with option =--enable-debugger== added. This time,
  don't run =make install=, but rename the built =bochs= binary to =bochsdbg=
  because this time it is built as a debugger for exammining each asm
  instruction.

- Copy the =bochs-dbg= binary to somewhere in your $PATH like =/usr/local/bin=.
*** Bochs config
# boot from floppy using our disk image -------------------------------
floppya: 1_44="/home/<your username>/disk.dsk", status=inserted  # Boot from drive A
 
# logging and reporting -----------------------------------------------
log:         OSDev.log             # All errors and info logs will output to OSDev.log
error:       action=report 
info:        action=report
** dd 
We use =dd= to create a flobby disk image that Bochs can use to boot our OS.

To create a disk image::

#+BEGIN_SRC sh
  dd if=/dev/zero of=disk.dsk bs=512 count=54
#+END_SRC

=if=: input file to write.
=of=: output disk image.
=bs=: block devices read by block; this parameter specifies block size that
a block device can read at a time
=count=: number of block a disk can have
* Boot process
** Pre BIOS
- When the power button press, the *Power Supply Unit* (=PSU=) sends a signal to
  motherboard.

- Motherboard reroutes this signal back to PSU to inform about its status. If a
  0 is received, meaning the motherboard is dead; otherwise, the motherboard is
  alive and PSU starts supplying power to the rest of the system.

- The PSU then sends a signal, called the *power_good* signal into the
  motherboard timer. When the timer receives this signal, it stops forcing a
  reset signal to the CPU and the CPU begins processing instructions.
** BIOS
BIOS refers to the firmware instructions that are located on the *BIOS ROM*

- The very first instruction performed by a CPU is to read the contents of a
  specific memory address that is preprogrammed into the CPU. In the case of x86
  based processors, this address is *FFFF:0000h*. This is the *last 16 bytes of
  memory at the end of the first megabyte of memory*, store a jump instruction
  (JMP) to jump to BIOS ROM code.

- The BIOS begins initializing a process called *Power On Self Test* (=POST=)

- The POST then tests to insure there is good amount of power being supplied,
  the devices installed (such as keyboard, mouse, USB, serial ports, etc.), and
  insures the memory is good (By testing for memory curruption).

- After the test is done, the BIOS searches for an operating system stored in
  the first 512 bytes of a bootable device, like a flobby disk or a hard drive.

** BIOS - continued
- Based on the boot order that you set in the BIOS Setup, the BIOS will execute
  Interrupt (INT) *0x19* to attempt to find a bootable device.

- If no bootable device is found (*INT 0x19* returns), the BIOS goes on to the
  next device listed in the boot order. If there is no more devices, it will
  print an error simular to "No Operating System found" and halt the system.

- If a bootloader is found (in the first 512 bytes of a any device), The BIOS
  then load the bootloader at location *0x7C00h* and start executing bootloader
  code. Address to jump to, like *0x7c00h*, is defined by the BIOS.

For more detailed steps: http://www.bioscentral.com/misc/biosbasics.htm
For more infomation about *0x7c00h*: http://www.glamenv-septzen.net/en/view/6

** Anatomy of a disk

[[./hdd.gif][hdd]]

- *Sector*: a group of 512 bytes. So, Sector 1 represents the first 512 bytes of a disk.
- *Head*: the side of the disk. Head 0 is the front side, Head 1 is the back side.
  Most disks only have 1 side, hence only 1 head ("Head 1")
- *Track*: a collection of sector. There are 18 sectors per track on flobby disk.
- *Cylinder*: a collection of same tracks on different platters.

** Algorithm
- Clear segment registers.
- Print some text (optinal).
- Load more code in futher sectors of the disk to execute.
- Fill the remaining of 512 bytes with 0, with the last 2 bytes a device
  signature i.e. a flobby disk signature 0xAA55.
** A Very simple bootloader
;*********************************************
;	Boot1.asm
;		- A Simple Bootloader
;
;	Operating Systems Development Tutorial
;*********************************************
 
org		0x7c00				; We are loaded by BIOS at 0x7C00
 
bits	16					; We are still in 16 bit Real Mode
 
Start:
 ; we will fill more code here later

	cli					; Clear all Interrupts
	hlt					; halt the system
	
times 510 - ($-$$) db 0				; We have to be 512 bytes. Clear the rest of the bytes with 0
 
dw 0xAA55					; Boot Signiture
